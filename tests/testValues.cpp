#include "testValues.h"

#include "../physics/math/linalg/trigonometry.h"

const Vec3 vectors[13]{
	Vec3(0.0, 0.0, 0.0),
	Vec3(1.0, 0.0, 0.0),
	Vec3(0.0, 1.0, 0.0),
	Vec3(0.0, 0.0, 1.0),
	Vec3(-1.0, 0.0, 0.0), 
	Vec3(0.0, -1.0, 0.0),
	Vec3(0.0, 0.0, -1.0),
	Vec3(2.3, 7.6, 0.1),
	Vec3(1000.3, 934.2, 3.401),
	Vec3(2.6, 0.65, 1.7),
	Vec3(-2.32, 0.0000012, 3.8),
	Vec3(-5.3, -4.3, -3.3),
	Vec3(-1000, -1000, -1000),
	
};
const Vec3 unitVectors[12]{
	Vec3(1.0, 0.0, 0.0),
	Vec3(0.0, 1.0, 0.0),
	Vec3(0.0, 0.0, 1.0),
	Vec3(-1.0, 0.0, 0.0),
	Vec3(0.0, -1.0, 0.0),
	Vec3(0.0, 0.0, -1.0),
	normalize(Vec3(2.3, 7.6, 0.1)),
	normalize(Vec3(1000.3, 934.2, 3.401)),
	normalize(Vec3(2.6, 0.65, 1.7)),
	normalize(Vec3(-2.32, 0.0000012, 3.8)),
	normalize(Vec3(-5.3, -4.3, -3.3)),
	normalize(Vec3(-1000, -1000, -1000)),
};
const Mat3 matrices[9]{
	Mat3{0,0,0,0,0,0,0,0,0},
	Mat3{1,0,0,0,1,0,0,0,1},
	Mat3{0,1,0,0,0,1,0,0,0},
	Mat3{0,0,1,0,1,0,1,0,0},
	Mat3{0,0,0,1,0,0,0,1,0},
	Mat3{1,0,0,0,0,0,0,0,0},
	Mat3{1,1,1,1,1,1,1,1,1},
	Mat3{5.3, 0,0,0, 7.3, 0,0,0, 2.3},
	Mat3{3.7, 2.3, -3.5, 1.3, -2.5, 1.6, -3.2, 2.3, 3.4},
};
const RotMat3 rotMatrices[9]{
	Mat3::IDENTITY(),
	rotX(0.1),
	rotY(0.1),
	rotZ(0.1),
	rotX(-0.1),
	rotY(-0.1),
	rotZ(-0.1),
	fromEulerAngles(0.2, 0.3, 0.4),
	fromEulerAngles(1.2, -0.5, 0.3),

};

Vec3f badVerticesI[8]{
	{3.7427008831009605f, 0.19949999999997348f, -2.8372588570310806f},
	{3.7427008831009791f, -0.00050000000002671519f, -2.8372588570310575f},
	{4.7430976602077610f, -0.00050000000004078726f, -3.8166496311117655f},
	{4.7430976602077424f, 0.19949999999995938f, -3.8166496311117886f},
	{4.1624397862784015f, 0.19950000000005996f, -2.4085173811281768f},
	{4.1624397862784202f, -0.00049999999994022881f, -2.4085173811281537f},
	{5.1628365633852020f, -0.00049999999995430089f, -3.3879081552088617f},
	{5.1628365633851834f, 0.19950000000004586f, -3.3879081552088848f},
};

Vec3f badVerticesJ[8]{
	{5.1677962452787920f, -0.00049999999985722576f, -3.3185062700045100f},
	{5.1677962452787707f, 0.19950000000014328f, -3.3185062700046259f},
	{6.5642349861367375f, 0.19950000000024037f, -3.4183002729857077f},
	{6.5642349861367588f, -0.00049999999976013676f, -3.4183002729855918f},
	{5.1250273868583260f, -0.00050000000020963831f, -3.9169800160865020f},
	{5.1250273868583047f, 0.19949999999979087f, -3.9169800160866179f},
	{6.5214661277162715f, 0.19949999999988796f, -4.0167740190677002f},
	{6.5214661277162929f, -0.00050000000011254930f, -4.0167740190675838f}
};
